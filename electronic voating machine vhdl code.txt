library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity evmz2_vhd is
port ( clk: in std_logic;
       reset: in std_logic;
		 party1: in std_logic;
		 party2: in std_logic;
		 party3: in std_logic;
		 nota: in std_logic;
		 count1_op: out std_logic_vector(4 downto 0);
		 count2_op: out std_logic_vector(4 downto 0);
		 count3_op: out std_logic_vector(4 downto 0);
		 nota_op: out std_logic_vector(4 downto 0);
		 p1: out std_logic:= '0';
		 p2: out std_logic:= '0';
		 p3: out std_logic:= '0';
	   p4: out std_logic:= '0'
		
		 
		 );
		 
end evmz2_vhd;


architecture evmz2_beh of evmz2_vhd is
signal count1,count2,count3,count4: std_logic_vector(4 downto 0);

begin
process(clk,reset,party1,party2,party3,nota)
--process(clk)
begin
if(reset='1') then
count1<="00000";
count2<="00000";
count3<="00000";
count4<="00000";
 

else
if( clk'event and clk='1' and reset='0' ) then
case party1 is
when '1' =>
count1<=count1+1;
when others => 
count1<=count1;
end case;
case party2 is 

when'1' =>
count2<=count2+1;
when others => 
count2<=count2;
end case;
case party3 is

when '1' =>
count3<=count3+1;
when others => 
count3<=count3;
end case;
case nota is

when '1' =>
count4<=count4+1;
when others => 
count4<=count4;
end case;
end if;
end if;
if (reset<='1') then
p1<='0';
p2<='0';
p3<='0';
p4<='0';
end if;
if (count1>count2 and count1>count3 and count1>count4) then
p1<='1';report "Party 1 is Leading";
p2<='0';
p3<='0';
p4<='0';
end if;
if (count2>count1 and count2>count3 and count2>count4) then
p2<='1'; report "Party 2 is Leading";
p1<='0';
p3<='0';
p4<='0';
end if;
if (count3>count1 and count3>count2 and count3>count4) then
p3<='1';report "Party 3 is Leading";
p2<='0';
p1<='0';
p4<='0';
end if;
if (count4>count1 and count4>count2 and count4>count3) then
p4<='1';report "nota is Leading";
p2<='0';
p3<='0';
p1<='0';
end if;

 end process;
 
 count1_op<=count1;
 count2_op<=count2;
 count3_op<=count3;
 nota_op<=count4;
  
end evmz2_beh;